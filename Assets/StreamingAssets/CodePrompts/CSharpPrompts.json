[
  {
    "ProgrammingLanguage": 8,
    "Category": 8,
    "QuestionPrompt": "Which keyword is used to inherit from a base class in C#?",
    "Options": [
      {
        "Text": "super",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "extends",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "inherits",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "base",
        "Action": null,
        "IsAnswer": true
      }
    ],
    "Difficulty": 1,
    "SampleCode": "",
    "Hint": "Think about how we define a class is a 'child' of another class.",
    "Tags": [
      "inheritance",
      "keywords"
    ],
    "Explanation": "In C#, the 'base' keyword is used to access members of the base class from within a derived class.",
    "Learned": false,
    "name": "D1 Base Keyword",
    "hideFlags": 0
  },
  {
    "ProgrammingLanguage": 8,
    "Category": 8,
    "QuestionPrompt": "In C#, what does the 'sealed' keyword do?",
    "Options": [
      {
        "Text": "It prevents a class from being instantiated.",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "It makes a class immutable.",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "It prevents a class from being inherited.",
        "Action": null,
        "IsAnswer": true
      },
      {
        "Text": "It hides a class from the rest of the application.",
        "Action": null,
        "IsAnswer": false
      }
    ],
    "Difficulty": 2,
    "SampleCode": "",
    "Hint": "Think about class inheritance.",
    "Tags": [
      "keywords",
      "class",
      "inheritance"
    ],
    "Explanation": "In C#, the 'sealed' keyword is used to prevent a class from being inherited.",
    "Learned": false,
    "name": "D2 Sealed Keyword",
    "hideFlags": 0
  },
  {
    "ProgrammingLanguage": 8,
    "Category": 8,
    "QuestionPrompt": "What is an interface in C#?",
    "Options": [
      {
        "Text": "A class that can't be instantiated.",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "A class with only abstract methods.",
        "Action": null,
        "IsAnswer": true
      },
      {
        "Text": "A class with only virtual methods.",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "A class with only sealed methods.",
        "Action": null,
        "IsAnswer": false
      }
    ],
    "Difficulty": 3,
    "SampleCode": "",
    "Hint": "Consider the purpose and usage of interfaces in C#.",
    "Tags": [
      "keywords",
      "class",
      "interface"
    ],
    "Explanation": "In C#, an interface is like an abstract class with only abstract methods. It's a contract for a class that guarantees specific functionality.",
    "Learned": false,
    "name": "D3 Interface",
    "hideFlags": 0
  },
  {
    "ProgrammingLanguage": 8,
    "Category": 128,
    "QuestionPrompt": "What is the time complexity of Quick Sort in the worst-case scenario?",
    "Options": [
      {
        "Text": "O(n)",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "O(n^2)",
        "Action": null,
        "IsAnswer": true
      },
      {
        "Text": "O(n log n)",
        "Action": null,
        "IsAnswer": false
      },
      {
        "Text": "O(log n)",
        "Action": null,
        "IsAnswer": false
      }
    ],
    "Difficulty": 4,
    "SampleCode": "",
    "Hint": "Think about the worst-case scenario when all elements are already sorted.",
    "Tags": [
      "Algorithms",
      "Quick Sort",
      "Time Complexity"
    ],
    "Explanation": "In the worst case, Quick Sort has a time complexity of O(n^2) when all elements are already sorted, or reverse sorted.",
    "Learned": true,
    "name": "D4 Time Complexity of Quick Sort",
    "hideFlags": 0
  }
]